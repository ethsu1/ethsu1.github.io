{"version":3,"sources":["projectImages/productivityio.png","projectImages/guesstheentity.png","About.js","Experience.js","Projects.js","Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","React","Component","Experience","projectData","title","img","productivityio","guesstheentity","Projects","GridList","cellHeight","map","tile","GridListTile","key","src","alt","theme","createMuiTheme","overrides","MuiAppBar","colorPrimary","color","backgroundColor","typography","h3","fontSize","breakpoints","up","Navigation","props","state","value","handleChange","bind","e","console","log","this","setState","ThemeProvider","AppBar","position","Toolbar","Grid","container","item","xs","Typography","variant","justify","Tabs","onChange","Tab","label","component","Link","to","Paper","path","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,sRCW5BC,E,uKANb,OACC,0C,GAHiBC,IAAMC,WCQXC,E,uKANb,OACC,+C,GAHsBF,IAAMC,W,kDCGzBE,EAAc,CACnB,CAACC,MAAO,iBACRC,IAAKC,KAEL,CAACF,MAAO,iBACRC,IAAKE,MAiBSC,E,uKAZb,OACC,kBAACC,EAAA,EAAD,CAAUC,WAAY,KACpBP,EAAYQ,KAAI,SAACC,GAAD,OAChB,kBAACC,EAAA,EAAD,CAAcC,IAAKF,EAAKP,KACvB,yBAAKU,IAAKH,EAAKP,IAAKW,IAAKJ,EAAKR,iB,GANbJ,IAAMC,WCPvBgB,EAAQC,YAAe,CAC3BC,UAAW,CACTC,UAAW,CAETC,aAAc,CAEZC,MAAO,UACPC,gBAAiB,aAMzBN,EAAMO,WAAWC,IAAjB,GACEC,SAAU,SACV,2BAA4B,CAC1BA,SAAU,WAHd,cAKGT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,WANd,2BAQc,aARd,G,IAiEeG,E,kDArDd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,MAAO,GAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,yDAOLC,EAAGH,GACfI,QAAQC,IAAIC,KAAKP,MAAMC,OACvBM,KAAKC,SAAS,CAACP,MAAOA,M,+BAGtB,OACA,kBAACQ,EAAA,EAAD,CAAevB,MAAOA,GACrB,kBAAC,IAAD,KACC,kBAACwB,EAAA,EAAD,CAAQnB,MAAM,UAAUoB,SAAS,UAChC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACd,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACd,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAID,kBAACL,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACd,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAQ,YACvB,kBAACC,EAAA,EAAD,CAAMnB,MAAOM,KAAKP,MAAMC,MAAOoB,SAAUd,KAAKL,cAC7C,kBAACoB,EAAA,EAAD,CAAKC,MAAM,QAAQC,UAAWC,IAAMC,GAAG,WACvC,kBAACJ,EAAA,EAAD,CAAKC,MAAM,aAAaC,UAAWC,IAAMC,GAAG,gBAC5C,kBAACJ,EAAA,EAAD,CAAKC,MAAM,WAAWC,UAAWC,IAAMC,GAAG,oBAOhD,kBAACC,EAAA,EAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,SAASJ,UAAWxD,IAChC,kBAAC,IAAD,CAAO4D,KAAK,eACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,aACX,kBAAC,EAAD,e,GA3CkB3D,IAAMC,WCnBhB2D,E,uKARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJU7D,IAAMC,WCUJ6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.42d43e29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/productivityio.e7b55107.png\";","module.exports = __webpack_public_path__ + \"static/media/guesstheentity.375fcb3d.png\";","import React from 'react';\nimport {Container} from '@material-ui/core';\n\nclass About extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div>About</div>\n\t\t)\n\t}\n}\n\nexport default About;","import React from 'react';\nimport {Container} from '@material-ui/core';\n\nclass Experience extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div>Experience</div>\n\t\t)\n\t}\n}\n\nexport default Experience;","import React from 'react';\nimport {GridList, GridListTile} from '@material-ui/core';\nimport productivityio from './projectImages/productivityio.png'\nimport guesstheentity from './projectImages/guesstheentity.png'\n\n\nconst projectData = [\n\t{title: 'ProductivityIO',\n\timg: productivityio,\n\t},\n\t{title: 'GuessTheEntity',\n\timg: guesstheentity,\n\t}\n]\nclass Projects extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<GridList cellHeight={400}>\n\t\t\t\t{projectData.map((tile) =>(\n\t\t\t\t\t<GridListTile key={tile.img}>\n\t\t\t\t\t\t<img src={tile.img} alt={tile.title} />\n\t\t\t\t\t</GridListTile>\n\t\t\t\t))}\n\t\t\t</GridList>\n\t\t)\n\t}\n}\n\nexport default Projects;","import React from 'react';\nimport {AppBar, Toolbar, Tabs, Tab, Typography, createMuiTheme, ThemeProvider, Grid, Paper} from '@material-ui/core';\nimport {BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport About from './About.js';\nimport Experience from './Experience.js';\nimport Projects from './Projects.js';\nconst theme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      // Name of the rule\n      colorPrimary: {\n        // Some CSS\n        color: '#B0B0B0',\n        backgroundColor: 'black',\n      },\n    },\n  },\n});\n\ntheme.typography.h3 = {\n  fontSize: '1.5rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem',\n  },\n  [theme.breakpoints.up('md')]: {\n    fontSize: '3.0rem',\n  },\n  fontFamily: 'Helvetica'\n};\n//navigation bar of website\nclass Navigation extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tvalue: 0,\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\thandleChange(e, value){\n\t\tconsole.log(this.state.value)\n\t\tthis.setState({value: value})\n\t}\n\trender() {\n\t\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<Router>\n\t\t\t\t<AppBar color='primary' position=\"sticky\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h3\">\n\t\t\t\t\t\t\t\tEthan Hsu\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t\t<Grid container justify=\"flex-end\">\n\t\t\t\t\t\t\t\t\t<Tabs value={this.state.value} onChange={this.handleChange}>\n\t\t\t\t\t\t\t\t\t\t<Tab label=\"About\" component={Link} to=\"/about\"/>\n\t\t\t\t\t\t\t\t\t\t<Tab label=\"Experience\" component={Link} to=\"/experience\" />\n\t\t\t\t\t\t\t\t\t\t<Tab label=\"Projects\" component={Link} to=\"/projects\"/>\n\t\t\t\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<Paper>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/about\" component={About}/>\n\t\t\t\t\t\t<Route path=\"/experience\">\n\t\t\t\t\t\t\t<Experience/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects\">\n\t\t\t\t\t\t\t<Projects/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Paper>\n\t\t\t</Router>\n\n\t\t</ThemeProvider>\n\t)\n\t}\n}\n\nexport default Navigation;","import React from 'react';\nimport Navigation from './Navigation.js';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}