{"version":3,"sources":["Navigation.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","overrides","MuiAppBar","colorPrimary","color","backgroundColor","Navigation","React","useState","value","setValue","ThemeProvider","AppBar","Toolbar","Typography","variant","Tabs","onChange","event","newValue","Tab","label","typography","h3","fontSize","breakpoints","up","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAEMA,EAAQC,YAAe,CAC3BC,UAAW,CACTC,UAAW,CAETC,aAAc,CAEZC,MAAO,UACPC,gBAAiB,aAiBV,SAASC,IAAc,IAAD,EACVC,IAAMC,SAAS,GADL,mBAC7BC,EAD6B,KACtBC,EADsB,KAMpC,OACC,kBAACC,EAAA,EAAD,CAAeZ,MAAOA,GACrB,kBAACa,EAAA,EAAD,CAAQR,MAAM,WACb,kBAACS,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGA,kBAACC,EAAA,EAAD,CAAMP,MAAOA,EAAOQ,SAVF,SAACC,EAAOC,GAC3BT,EAASS,KAUP,kBAACC,EAAA,EAAD,CAAKC,MAAM,UACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,eACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,iBA3BjBtB,EAAMuB,WAAWC,IAAjB,GACEC,SAAU,SACV,2BAA4B,CAC1BA,SAAU,WAHd,cAKGzB,EAAM0B,YAAYC,GAAG,MAAQ,CAC5BF,SAAU,WANd,2BAQc,aARd,G,ICHeG,E,uKARX,OACE,yBAAKC,UAAU,OACb,kBAACtB,EAAD,W,GAJUC,IAAMsB,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.576dbe6d.chunk.js","sourcesContent":["import React from 'react';\nimport {AppBar, Toolbar, Tabs, Tab, Typography, createMuiTheme, ThemeProvider} from '@material-ui/core';\nconst theme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      // Name of the rule\n      colorPrimary: {\n        // Some CSS\n        color: '#B0B0B0',\n        backgroundColor: 'black',\n      },\n    },\n  },\n});\n\ntheme.typography.h3 = {\n  fontSize: '1.5rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem',\n  },\n  [theme.breakpoints.up('md')]: {\n    fontSize: '3.0rem',\n  },\n  fontFamily: 'Helvetica'\n};\n//navigation bar of website\nexport default function Navigation() {\n\tconst [value, setValue] = React.useState(0);\n\n\t const handleChange = (event, newValue) => {\n\t   setValue(newValue);\n\t };\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<AppBar color='primary'>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<Typography variant=\"h3\">\n\t\t\t\t\t\tEthan Hsu\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Tabs value={value} onChange={handleChange}>\n\t\t\t\t\t\t<Tab label=\"About\"/>\n\t\t\t\t\t\t<Tab label=\"Experience\" />\n\t\t\t\t\t\t<Tab label=\"Projects\"/>\n\t\t\t\t\t</Tabs>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</ThemeProvider>\n\t)\n}","import React from 'react';\nimport Navigation from './Navigation.js';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}